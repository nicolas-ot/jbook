{"version":3,"sources":["../node_modules/prettier sync","state/action-types/index.ts","state/reducers/cellsReducer.ts","state/reducers/bundlesReducer.ts","state/reducers/index.ts","state/store.ts","bundler/index.ts","bundler/plugins/fetch-plugin.ts","bundler/plugins/unpkg-path-plugin.ts","state/action-creators/index.ts","hooks/use-typed-selector.ts","components/code-editor.tsx","components/preview.tsx","components/resizable.tsx","hooks/use-actions.ts","components/code-cell.tsx","hooks/use-cumulative-code.ts","components/text-editor.tsx","components/action-bar.tsx","components/cell-list-item.tsx","components/add-cell.tsx","components/cell-list.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ActionType","initialState","loading","error","order","data","reducer","produce","state","action","type","UPDATE_CELL","payload","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substr","BUNDLE_START","cellId","err","BUNDLE_COMPLETE","bundle","reducers","combineReducers","cells","cellsReducer","bundles","bundlesReducer","store","createStore","applyMiddleware","thunk","dispatch","service","fileCache","localForage","createInstance","name","fetchPlugin","input","setup","build","onLoad","args","a","loader","contents","getItem","path","cachedResult","axios","get","request","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem","bundler","esbuild","worker","wasmURL","entryPoints","write","plugins","onResolve","namespace","href","define","global","outputFiles","text","message","updateCell","deleteCell","moveCell","insertCellAfter","cellType","createBundle","useTypedSelector","useSelector","CodeEditor","onChange","editorRef","useRef","className","style","float","onClick","unformatted","current","getValue","formatted","prettier","format","parser","useTabs","semi","singleQuote","setValue","onMount","editor","onDidChangeModelContent","language","theme","options","tabSize","minimap","enabled","wordWrap","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","html","Preview","iframe","useEffect","srcdoc","setTimeout","contentWindow","postMessage","title","ref","sandbox","srcDoc","Resizable","resizableProps","children","useState","window","innerHeight","setInnerHeight","innerWidth","setInnerWidth","width","setWidth","timer","listener","clearTimeout","addEventListener","removeEventListener","Infinity","height","resizeHandles","minConstraints","maxConstraints","onResizeStop","_event","size","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","CodeCell","cumulativeCode","orderedCells","map","c","push","join","preview","max","display","flexDirection","value","TextEditor","editing","setEditing","target","contains","document","capture","v","Markdown","source","ActionBar","CellListItem","child","AddCell","forceVisible","previousCellId","CellList","renderedCells","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.50cd9781.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 131;","export enum ActionType {\n  MOVE_CELL = 'move_cell',\n  DELETE_CELL = 'delete_cell',\n  INSERT_CELL_AFTER = 'insert_cell_after',\n  UPDATE_CELL = 'update_cell',\n  BUNDLE_START = 'bundle_start',\n  BUNDLE_COMPLETE = 'bundle_complete',\n}\n","import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n  loading: boolean;\n  error: string | null;\n  order: string[];\n  data: {\n    [key: string]: Cell;\n  };\n}\n\nconst initialState: CellsState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {},\n};\n\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const { id, content } = action.payload;\n\n      state.data[id].content = content;\n\n      return state;\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter((id) => id !== action.payload);\n\n      return state;\n    case ActionType.MOVE_CELL:\n      const { direction } = action.payload;\n      const index = state.order.findIndex((id) => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n\n      return state;\n    case ActionType.INSERT_CELL_AFTER:\n      const cell: Cell = {\n        content: '',\n        type: action.payload.type,\n        id: action.payload.id || randomId(),\n      };\n\n      state.data[cell.id] = cell;\n\n      const foundIndex = state.order.findIndex(\n        (id) => id === action.payload.id\n      );\n\n      if (foundIndex < 0) {\n        state.order.unshift(cell.id);\n      } else {\n        state.order.splice(foundIndex + 1, 0, cell.id);\n      }\n\n      return state;\n    default:\n      return state;\n  }\n});\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nexport default reducer;\n","import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\ninterface BundlesState {\n  [key: string]:\n    | {\n        loading: boolean;\n        code: string;\n        err: string;\n      }\n    | undefined;\n}\n\nconst initialState: BundlesState = {};\n\nconst reducer = produce(\n  (state: BundlesState = initialState, action: Action) => {\n    switch (action.type) {\n      case ActionType.BUNDLE_START:\n        state[action.payload.cellId] = {\n          loading: true,\n          code: '',\n          err: '',\n        };\n        return state;\n      case ActionType.BUNDLE_COMPLETE:\n        state[action.payload.cellId] = {\n          loading: false,\n          code: action.payload.bundle.code,\n          err: action.payload.bundle.err,\n        };\n        return state;\n      default:\n        return state;\n    }\n  }\n);\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport cellsReducer from './cellsReducer';\nimport bundlesReducer from './bundlesReducer';\n\nconst reducers = combineReducers({\n  cells: cellsReducer,\n  bundles: bundlesReducer,\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { ActionType } from './action-types';\n\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\n\nstore.dispatch({\n  type: ActionType.INSERT_CELL_AFTER,\n  payload: {\n    id: 'second',\n    type: 'code',\n  },\n});\n\nstore.dispatch({\n  type: ActionType.INSERT_CELL_AFTER,\n  payload: {\n    id: null,\n    type: 'text',\n  },\n});\n\nstore.dispatch({\n  type: ActionType.INSERT_CELL_AFTER,\n  payload: {\n    id: 'first',\n    type: 'code',\n  },\n});\n\nstore.dispatch({\n  type: ActionType.UPDATE_CELL,\n  payload: {\n    id: 'first',\n    content:\n      \"import React from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nconst App = () => {\\n\\treturn('Hello There!');\\n};\\n\\nshow(<App />);\\n// ReactDOM.render(<App />, document.querySelector('#root'));\\n\",\n  },\n});\n\nstore.dispatch({\n  type: ActionType.UPDATE_CELL,\n  payload: {\n    id: 'second',\n    content: 'show(<App />);',\n  },\n});\n\nstore.dispatch({\n  type: ActionType.INSERT_CELL_AFTER,\n  payload: {\n    id: null,\n    type: 'text',\n  },\n});\n","import * as esbuild from 'esbuild-wasm';\r\nimport { unpkgPathPlugin } from './plugins/unpkg-path-plugin';\r\nimport { fetchPlugin } from './plugins/fetch-plugin';\r\n\r\nlet service: esbuild.Service;\r\n\r\nconst bundler = async (input: string) => {\r\n  if (!service) {\r\n    service = await esbuild.startService({\r\n      worker: true,\r\n      wasmURL: 'https://unpkg.com/esbuild-wasm@0.8.27/esbuild.wasm',\r\n    });\r\n  }\r\n\r\n  try {\r\n    const result = await service.build({\r\n      entryPoints: ['index.js'],\r\n      bundle: true,\r\n      write: false,\r\n      plugins: [unpkgPathPlugin(), fetchPlugin(input)],\r\n      define: {\r\n        'process.env.NODE_ENV': '\"production\"',\r\n        global: 'window',\r\n      },\r\n    });\r\n\r\n    return {\r\n      err: '',\r\n      code: result.outputFiles[0].text,\r\n    };\r\n  } catch (err) {\r\n    return {\r\n      err: err.message,\r\n      code: '',\r\n    };\r\n  }\r\n};\r\n\r\nexport default bundler;\r\n","import * as esbuild from \"esbuild-wasm\";\r\nimport axios from \"axios\";\r\nimport localForage from \"localforage\";\r\n\r\nconst fileCache = localForage.createInstance({\r\n  name: \"filecache\",\r\n});\r\n\r\nexport const fetchPlugin = (input: string) => {\r\n  return {\r\n    name: \"fetch-plugin\",\r\n    setup: (build: esbuild.PluginBuild) => {\r\n      build.onLoad({ filter: /^index\\.js$/ }, async (args: any) => {\r\n        return {\r\n          loader: \"jsx\",\r\n          contents: input,\r\n        };\r\n      });\r\n\r\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\r\n        const cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(\r\n          args.path\r\n        );\r\n\r\n        if (cachedResult) {\r\n          return cachedResult;\r\n        }\r\n      });\r\n\r\n      build.onLoad({ filter: /.css$/ }, async (args: any) => {\r\n        const { data, request } = await axios.get(args.path);\r\n        const escaped = data\r\n          .replace(/\\n/g, \"\")\r\n          .replace(/\"/g, '\\\\\"')\r\n          .replace(/'/g, \"\\\\'\");\r\n        const contents = `\r\n          const style = document.createElement('style');\r\n          style.innerText = '${escaped}';\r\n          document.head.appendChild(style);\r\n        `;\r\n\r\n        const result: esbuild.OnLoadResult = {\r\n          loader: \"jsx\",\r\n          contents,\r\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\r\n        };\r\n        await fileCache.setItem(args.path, result);\r\n\r\n        return result;\r\n      });\r\n\r\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\r\n        const { data, request } = await axios.get(args.path);\r\n\r\n        const result: esbuild.OnLoadResult = {\r\n          loader: \"jsx\",\r\n          contents: data,\r\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\r\n        };\r\n\r\n        await fileCache.setItem(args.path, result);\r\n        return result;\r\n      });\r\n    },\r\n  };\r\n};\r\n","import * as esbuild from \"esbuild-wasm\";\r\n\r\nexport const unpkgPathPlugin = () => {\r\n  return {\r\n    name: \"unpkg-path-plugin\",\r\n    setup(build: esbuild.PluginBuild) {\r\n      // Handle root entry file of 'index.js'\r\n      build.onResolve({ filter: /(^index\\.js$)/ }, () => {\r\n        return { path: \"index.js\", namespace: \"a\" };\r\n      });\r\n\r\n      // Handle relative paths in a module\r\n      build.onResolve({ filter: /^\\.+\\// }, (args: any) => {\r\n        return {\r\n          namespace: \"a\",\r\n          path: new URL(args.path, \"https://unpkg.com\" + args.resolveDir + \"/\")\r\n            .href,\r\n        };\r\n      });\r\n\r\n      // Handle main file of a module\r\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\r\n        return {\r\n          namespace: \"a\",\r\n          path: `https://unpkg.com/${args.path}`,\r\n        };\r\n      });\r\n    },\r\n  };\r\n};\r\n","import { Dispatch } from 'redux';\nimport bundler from '../../bundler';\nimport { ActionType } from '../action-types';\nimport {\n  UpdateCellAction,\n  DeleteCellAction,\n  MoveCellAction,\n  InsertCellAfterAction,\n  BundleStartAction,\n  BundleCompleteAction,\n  Direction,\n} from '../actions';\nimport { CellTypes } from '../cell';\n\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content,\n    },\n  };\n};\n\nexport const deleteCell = (id: string): DeleteCellAction => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id,\n  };\n};\n\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction,\n    },\n  };\n};\n\nexport const insertCellAfter = (\n  id: string | null,\n  cellType: CellTypes\n): InsertCellAfterAction => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType,\n    },\n  };\n};\n\nexport const createBundle = (cellId: string, input: string) => {\n  return async (\n    dispatch: Dispatch<BundleCompleteAction | BundleStartAction>\n  ) => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        cellId,\n      },\n    });\n\n    const result = await bundler(input);\n\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        cellId,\n        bundle: result,\n      },\n    });\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport { RootState } from '../state';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useEffect, useRef } from 'react';\r\nimport MonacoEditor, { OnMount } from '@monaco-editor/react';\r\nimport prettier from 'prettier';\r\nimport parser from 'prettier/parser-babel';\r\n// parser is to format advanced javascript codes that might have ES2015, 2016 etc.\r\n\r\n// import j from \"jscodeshift\"\r\n\r\nimport './code-editor.scss';\r\nimport './syntax.css';\r\n\r\ninterface CodeEditorProps {\r\n  code: string;\r\n  onChange(code: string | undefined): void;\r\n}\r\n\r\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, code }) => {\r\n  const editorRef = useRef<any>();\r\n\r\n  const onMountEditor: OnMount = (editor) => {\r\n    // Minimal Babel setup for React JSX parsing:\r\n\r\n    editorRef.current = editor;\r\n    editor.onDidChangeModelContent(() => {\r\n      onChange(editor.getValue());\r\n    });\r\n\r\n    editor.setValue(code);\r\n  };\r\n\r\n  const onFormatClick = () => {\r\n    const unformatted = editorRef.current.getValue();\r\n\r\n    const formatted = prettier\r\n      .format(unformatted, {\r\n        parser: 'babel',\r\n        plugins: [parser],\r\n        useTabs: false,\r\n        semi: true,\r\n        singleQuote: true,\r\n      })\r\n      .replace(/\\n$/, '');\r\n    editorRef.current.setValue(formatted);\r\n  };\r\n\r\n  return (\r\n    <div className='editor-wrapper'>\r\n      <button\r\n        className='button button-format is-primary is-small'\r\n        style={{ float: 'right' }}\r\n        onClick={onFormatClick}\r\n      >\r\n        Format\r\n      </button>\r\n      <MonacoEditor\r\n        onMount={onMountEditor}\r\n        // onChange={onChangeEditor}\r\n        // value={code}\r\n        language='javascript'\r\n        theme='vs-dark'\r\n        options={{\r\n          tabSize: 2,\r\n          minimap: { enabled: false },\r\n          wordWrap: 'on',\r\n          showUnused: false,\r\n          folding: false,\r\n          lineNumbersMinChars: 3,\r\n          fontSize: 16,\r\n          scrollBeyondLastLine: false,\r\n          automaticLayout: true,\r\n        }}\r\n      ></MonacoEditor>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n","import './preview.scss';\r\nimport { useRef, useEffect } from 'react';\r\n\r\ninterface PreviewProps {\r\n  code: string;\r\n  err: string;\r\n}\r\n\r\nconst html = `\r\n    <html>\r\n      <head>\r\n        <style>html { background-color: white; }</style>\r\n      </head>\r\n      <body>\r\n        <div id=\"root\"></div>\r\n        <script>\r\n          const handleError = (err) => {\r\n            const root = document.querySelector('#root');\r\n            root.innerHTML = '<div style=\"color: red;\"><h4>Runtime Error</h4>' + err + '</div>';\r\n            console.error(err);\r\n          };\r\n\r\n          window.addEventListener('error', (event) => {\r\n            event.preventDefault();\r\n            handleError(event.error);\r\n          });\r\n\r\n          window.addEventListener('message', (event) => {\r\n            try {\r\n              eval(event.data);\r\n            } catch (err) {\r\n              handleError(err);\r\n            }\r\n          }, false);\r\n        </script>\r\n      </body>\r\n    </html>\r\n  `;\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ code, err }) => {\r\n  const iframe = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    iframe.current.srcdoc = html;\r\n    setTimeout(() => {\r\n      iframe.current.contentWindow.postMessage(code, '*');\r\n    }, 50);\r\n  }, [code]);\r\n\r\n  return (\r\n    <div className='preview-wrapper'>\r\n      <iframe\r\n        title='preview'\r\n        ref={iframe}\r\n        sandbox='allow-scripts'\r\n        srcDoc={html}\r\n      />\r\n      {err && <div className='error-message'>{err}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { ResizableBox, ResizableBoxProps } from 'react-resizable';\r\nimport './resizable.scss';\r\n\r\ninterface ResizableProps {\r\n  direction: 'horizontal' | 'vertical';\r\n}\r\n\r\nconst Resizable: React.FC<ResizableProps> = ({ direction, children }) => {\r\n  const [innerHeight, setInnerHeight] = useState(window.innerHeight);\r\n  const [innerWidth, setInnerWidth] = useState(window.innerWidth);\r\n  const [width, setWidth] = useState(window.innerWidth * 0.75);\r\n\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout;\r\n    // console.log(123);\r\n    const listener = () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n      timer = setTimeout(() => {\r\n        setInnerHeight(window.innerHeight);\r\n        if (width > window.innerWidth * 0.75) {\r\n          setWidth(window.innerWidth * 0.75);\r\n        }\r\n        setInnerWidth(window.innerWidth);\r\n      }, 200);\r\n    };\r\n\r\n    window.addEventListener('resize', listener);\r\n    return () => {\r\n      window.removeEventListener('resize', listener);\r\n    };\r\n  }, [width]);\r\n\r\n  let resizableProps: ResizableBoxProps;\r\n\r\n  if (direction === 'vertical') {\r\n    resizableProps = {\r\n      width: Infinity,\r\n      height: 300,\r\n      resizeHandles: ['s'],\r\n      minConstraints: [Infinity, 24],\r\n      maxConstraints: [Infinity, innerHeight * 0.9],\r\n    };\r\n  } else {\r\n    resizableProps = {\r\n      className: 'resize-horizontal',\r\n      onResizeStop: (_event, data) => {\r\n        setWidth(data.size.width);\r\n      },\r\n      height: Infinity,\r\n      width,\r\n      resizeHandles: ['e'],\r\n      minConstraints: [innerWidth * 0.2, Infinity],\r\n      maxConstraints: [innerWidth * 0.75, Infinity],\r\n    };\r\n  }\r\n\r\n  return <ResizableBox {...resizableProps}>{children}</ResizableBox>;\r\n};\r\n\r\nexport default Resizable;\r\n","import { useMemo } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { actionCreators } from '../state';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return useMemo(() => {\r\n    return bindActionCreators(actionCreators, dispatch);\r\n  }, [dispatch]);\r\n};\r\n","import { useEffect } from 'react';\r\nimport './code-cell.css';\r\n\r\nimport CodeEditor from '../components/code-editor';\r\nimport Preview from '../components/preview';\r\nimport Resizable from './resizable';\r\nimport { Cell } from '../state';\r\nimport { useActions } from '../hooks/use-actions';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\nimport { useCumulativeCode } from '../hooks/use-cumulative-code';\r\n\r\ninterface CodeCellProps {\r\n  cell: Cell;\r\n}\r\n\r\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\r\n  // console.log(cell.id);\r\n  const { updateCell, createBundle } = useActions();\r\n  const bundle = useTypedSelector((state) => state.bundles[cell.id]);\r\n  const cumulativeCode = useCumulativeCode(cell.id);\r\n\r\n  useEffect(() => {\r\n    if (!bundle) {\r\n      createBundle(cell.id, cumulativeCode);\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(async () => {\r\n      createBundle(cell.id, cumulativeCode);\r\n    }, 750);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [cumulativeCode, cell.id, createBundle]);\r\n\r\n  // const html = `\r\n  //   <script>\r\n  //     ${code}\r\n  //   </script>\r\n  // `;\r\n  // this is dangerous when the input is (<script>...</script>)\r\n  // if (bundle) console.log(bundle.code);\r\n  const preview =\r\n    !bundle || bundle.loading ? (\r\n      <div className='progress-cover'>\r\n        <progress className='progress is-small is-primary' max='100'>\r\n          Loading\r\n        </progress>\r\n      </div>\r\n    ) : (\r\n      <Preview code={bundle.code} err={bundle.err} />\r\n    );\r\n  return (\r\n    <Resizable direction='vertical'>\r\n      <div\r\n        style={{\r\n          height: 'calc(100% - 10px)',\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n        }}\r\n      >\r\n        <Resizable direction='horizontal'>\r\n          <CodeEditor\r\n            code={cell.content}\r\n            onChange={(value: string) => updateCell(cell.id, value)}\r\n          />\r\n        </Resizable>\r\n        <div className='progress-wrapper'>\r\n          {/* {bundle && <Preview code={bundle.code} errorMessage={bundle.err} />} */}\r\n          {preview}\r\n        </div>\r\n      </div>\r\n    </Resizable>\r\n  );\r\n};\r\n\r\nexport default CodeCell;\r\n","import { useTypedSelector } from './use-typed-selector';\n\nexport const useCumulativeCode = (cellId: string) => {\n  return useTypedSelector((state) => {\n    const { data, order } = state.cells;\n    const orderedCells = order.map((id) => data[id]);\n\n    const showFunc = `\n    import _React from 'react';\n    import _ReactDOM from 'react-dom';\n    var show = (value) => {\n      const root = document.querySelector('#root');\n\n      if (typeof value === 'object') {\n        if (value.$$typeof && value.props) {\n          _ReactDOM.render(value, root);\n        } else {\n          root.innerHTML = JSON.stringify(value);\n        }\n      } else {\n        root.innerHTML = value;\n      }\n    };\n  `;\n    const showFuncNoop = 'var show = () => {}';\n    const cumulativeCode = [];\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n        cumulativeCode.push(c.content);\n      }\n      if (c.id === cellId) {\n        break;\n      }\n    }\n    return cumulativeCode;\n  }).join('\\n');\n};\n","import './text-editor.scss';\r\nimport MDEditor from '@uiw/react-md-editor';\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport { Cell } from '../state';\r\nimport { useActions } from '../hooks/use-actions';\r\n\r\ninterface TextEditorProps {\r\n  cell: Cell;\r\n}\r\n\r\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  const { updateCell } = useActions();\r\n\r\n  useEffect(() => {\r\n    const listener = (e: MouseEvent) => {\r\n      if (ref.current && e.target && ref.current.contains(e.target as Node))\r\n        return;\r\n\r\n      setEditing(false);\r\n    };\r\n\r\n    document.addEventListener('click', listener, { capture: true });\r\n\r\n    return () => {\r\n      document.removeEventListener('click', listener, { capture: true });\r\n    };\r\n  }, []);\r\n\r\n  if (editing) {\r\n    return (\r\n      <div className='text-editor' ref={ref}>\r\n        <MDEditor\r\n          value={cell.content}\r\n          onChange={(v) => {\r\n            updateCell(cell.id, v || '');\r\n          }}\r\n        ></MDEditor>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className='text-editor card'>\r\n      <div\r\n        className='card-content'\r\n        onClick={() => {\r\n          setEditing(true);\r\n        }}\r\n      >\r\n        <MDEditor.Markdown\r\n          source={cell.content || 'Click to edit'}\r\n        ></MDEditor.Markdown>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextEditor;\r\n","import './action-bar.css';\nimport { useActions } from '../hooks/use-actions';\n\ninterface ActionBarProps {\n  id: string;\n}\n\nconst ActionBar: React.FC<ActionBarProps> = ({ id }) => {\n  const { moveCell, deleteCell } = useActions();\n\n  return (\n    <div className=\"action-bar\">\n      <button\n        className=\"button is-primary is-small\"\n        onClick={() => moveCell(id, 'up')}\n      >\n        <span className=\"icon\">\n          <i className=\"fas fa-arrow-up\"></i>\n        </span>\n      </button>\n      <button\n        className=\"button is-primary is-small\"\n        onClick={() => moveCell(id, 'down')}\n      >\n        <span className=\"icon\">\n          <i className=\"fas fa-arrow-down\"></i>\n        </span>\n      </button>\n      <button\n        className=\"button is-primary is-small\"\n        onClick={() => deleteCell(id)}\n      >\n        <span className=\"icon\">\n          <i className=\"fas fa-times\"></i>\n        </span>\n      </button>\n    </div>\n  );\n};\n\nexport default ActionBar;\n","import './cell-list-item.css';\r\nimport { Cell } from '../state';\r\nimport CodeCell from './code-cell';\r\nimport TextEditor from './text-editor';\r\nimport ActionBar from './action-bar';\r\n\r\ninterface CellListItemProps {\r\n  cell: Cell;\r\n}\r\n\r\nconst CellListItem: React.FC<CellListItemProps> = ({ cell }) => {\r\n  let child: JSX.Element;\r\n  if (cell.type === 'code') {\r\n    child = (\r\n      <>\r\n        <div className='action-bar-wrapper'>\r\n          <ActionBar id={cell.id} />\r\n        </div>\r\n        <CodeCell cell={cell} />\r\n      </>\r\n    );\r\n  } else {\r\n    child = (\r\n      <>\r\n        <TextEditor cell={cell} />\r\n        <ActionBar id={cell.id} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return <div className='cell-list-item'>{child}</div>;\r\n};\r\n\r\nexport default CellListItem;\r\n","import './add-cell.css';\nimport { useActions } from '../hooks/use-actions';\n\ninterface AddCellProps {\n  previousCellId: string | null;\n  forceVisible?: boolean;\n}\n\nconst AddCell: React.FC<AddCellProps> = ({ forceVisible, previousCellId }) => {\n  const { insertCellAfter } = useActions();\n\n  return (\n    <div className={`add-cell ${forceVisible && 'force-visible'}`}>\n      <div className='add-buttons'>\n        <button\n          className='button is-rounded is-primary is-small'\n          onClick={() => insertCellAfter(previousCellId, 'code')}\n        >\n          <span className='icon is-small'>\n            <i className='fas fa-plus'></i>\n          </span>\n          <span>Code</span>\n        </button>\n        <button\n          className='button is-rounded is-primary is-small'\n          onClick={() => insertCellAfter(previousCellId, 'text')}\n        >\n          <span className='icon is-small'>\n            <i className='fas fa-plus' />\n          </span>\n          <span>Text</span>\n        </button>\n      </div>\n      <div className='divider'></div>\n    </div>\n  );\n};\n\nexport default AddCell;\n","import './cell-list.scss';\r\nimport { Fragment } from 'react';\r\nimport { useTypedSelector } from '../hooks/use-typed-selector';\r\nimport CellListItem from './cell-list-item';\r\nimport AddCell from './add-cell';\r\n\r\nconst CellList: React.FC = () => {\r\n  const cells = useTypedSelector(({ cells: { order, data } }) =>\r\n    order.map((id) => data[id])\r\n  );\r\n\r\n  const renderedCells = cells.map((cell) => (\r\n    <Fragment key={cell.id}>\r\n      <CellListItem cell={cell} />\r\n      <AddCell previousCellId={cell.id} />\r\n    </Fragment>\r\n  ));\r\n\r\n  return (\r\n    <div className='cell-list'>\r\n      <AddCell forceVisible={cells.length === 0} previousCellId={null} />\r\n      {renderedCells}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CellList;\r\n","import ReactDOM from 'react-dom';\nimport 'bulmaswatch/superhero/bulmaswatch.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\n// import CodeCell from './components/code-cell';\nimport { Provider } from 'react-redux';\nimport { store } from './state';\n\nimport CellList from './components/cell-list';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div>\n        {/* <CodeCell></CodeCell> */}\n        <CellList></CellList>\n      </div>\n    </Provider>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}